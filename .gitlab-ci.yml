image: python:3

stages:
  - development
  - prepare
  - build
  - test
  - quality
  - deploy

.local:
  engine: docker,auto
  real_paths: true
  sockets: true

'Changelog':
  stage: development
  image: local:silent
  script:
    - mkdir -p ./.tmp/
    - ls ./.tmp/git-chglog >/dev/null 2>&1 || wget -O ./.tmp/git-chglog -q https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64
    - chmod +x ./.tmp/git-chglog
    - 'echo -n " > Current commit : "'
    - git describe --always
    - echo ''
    - 'read -p " > Release tag : " -r tag'
    - echo ''
    - git tag -f -m '' "${tag}"
    - ./.tmp/git-chglog -o ./CHANGELOG.md
    - sed -i "s#raw/[^/]*/docs#raw/${tag}/docs#g" ./README.md
    - git add -v ./CHANGELOG.md ./README.md
    - 'git commit -m "docs: changelog: regenerate release tag changes history"'
    - git tag -f -m '' "${tag}"
    - ./.tmp/git-chglog -o ./CHANGELOG.md
    - git add -v ./CHANGELOG.md
    - git commit --amend --no-edit
    - git tag -f -m '' "${tag}"
  only:
    - local

'Dependencies':
  stage: development
  image: local:quiet
  script:
    - sudo pip3 install -r requirements/runtime.txt --upgrade
    - sudo pip3 install -r requirements/build.txt --upgrade
    - sudo pip3 install -r requirements/coverage.txt --upgrade
    - sudo pip3 install -r requirements/deploy.txt --upgrade
    - sudo pip3 install -r requirements/docs.txt --upgrade
    - sudo pip3 install -r requirements/quality.txt --upgrade
  only:
    - local

'Development':
  stage: development
  image: local:quiet
  script:
    - sudo rm -rf build dist *.egg-info .eggs
    - python3 setup.py bdist_wheel
    - sudo pip3 install --force-reinstall --no-deps --upgrade dist/*.whl
  only:
    - local

'Preview':
  stage: development
  image: local:silent
  script:
    - for i in $(seq 1 100); do echo ' '; done
    - sleep 3
    - python3 ./docs/preview.py
    - sleep 10
  only:
    - local

'Codestyle':
  stage: prepare
  variables:
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  before_script:
    - pip3 install -q -r requirements/quality.txt --upgrade
  script:
    - yapf -i ./docs/*.py ./gitlabci_local/*.py ./gitlabci_local/*/*.py ./setup.py
    - unify -i --quote "'" ./docs/*.py ./gitlabci_local/*.py ./gitlabci_local/*/*.py ./setup.py
  after_script:
    - echo '' && git diff --name-status
    - git diff --quiet
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - 'docs/**/*'
        - 'gitlabci_local/**/*'
        - 'setup.py'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != "develop"
      when: on_success
  allow_failure: true

'Lint':
  stage: prepare
  variables:
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  before_script:
    - pip3 install -q -r requirements/runtime.txt --upgrade
    - pip3 install -q -r requirements/docs.txt --upgrade
    - pip3 install -q -r requirements/quality.txt --upgrade
  script:
    - pylint --errors-only ./docs/ ./gitlabci_local/ ./setup.py
    - |
      pylint \
        --disable=bare-except \
        --disable=line-too-long \
        --disable=missing-docstring \
        --disable=no-self-use \
        --disable=too-few-public-methods \
        --disable=too-many-arguments \
        --disable=too-many-branches \
        --disable=too-many-locals \
        --disable=too-many-nested-blocks \
        --disable=too-many-statements \
        --redefining-builtins-modules=sys \
        ./docs/ ./gitlabci_local/ ./setup.py
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - 'docs/**/*'
        - 'gitlabci_local/**/*'
        - 'setup.py'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != "develop"
      when: on_success
  allow_failure: true

'Build':
  stage: build
  variables:
    PIP_DISABLE_PIP_VERSION_CHECK: 1
  before_script:
    - pip3 install -r requirements/runtime.txt --upgrade
    - pip3 install -r requirements/build.txt --upgrade
  script:
    - rm -rf build dist *.egg-info .eggs
    - python3 setup.py bdist_wheel
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - 'gitlabci_local/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != "develop"
      when: on_success
  artifacts:
    paths:
      - dist/

.unit-tests-docker:
  services:
    - docker:19.03.13-dind
  dependencies:
    - Build
  variables:
    DOCKER_DRIVER: overlay2
  before_script: &unit-tests-docker-before |-

.unit-tests-podman:
  dependencies:
    - Build
  variables:
    DOCKER_HOST: tcp://127.0.0.1:9999
  before_script: &unit-tests-podman-before |-
    echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' >/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/Release.key | apt-key add -
    wget -P /tmp/ http://ftp.br.debian.org/debian/pool/main/libs/libseccomp/libseccomp2_2.5.0-3+b1_amd64.deb
    apt update
    apt install -y /tmp/libseccomp2_2.5.0-3+b1_amd64.deb
    rm -f /tmp/libseccomp2_2.5.0-3+b1_amd64.deb
    apt install -y podman
    sed -i 's#.*cgroup_manager = ".*"#cgroup_manager = "cgroupfs"#g' /etc/containers/containers.conf
    sed -i 's#.*events_logger = ".*"#events_logger = "file"#g' /etc/containers/containers.conf
    sed -i 's#driver = ""#driver = "vfs"#g' /etc/containers/storage.conf

.unit-tests-rules:
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - 'gitlabci_local/**/*'
    - if: $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $CI_PIPELINE_SOURCE == "web" || $CI_COMMIT_REF_NAME != "develop"
      when: on_success

.unit-tests-template:
  stage: test
  timeout: 10m
  variables:
    FORCE_STYLING: 'true'
    TEMP: .tmp
    TERM: ansi
  before_script: &unit-tests-template-before |-
    mkdir -p ./.tmp/
    pip install dist/*.whl
    pip install --force-reinstall --no-deps --upgrade dist/*.whl
    pip show gitlabci-local
  script:
    - for path in ./tests/*; do (cd "${path}/" && sh ./test.sh); done

.coverage-template:
  extends:
    - .unit-tests-template
    - .unit-tests-rules
  variables:
    COVERAGE_FOLDER: ${CI_PROJECT_DIR}/coverage-reports
    PYTHONPATH: ${CI_PROJECT_DIR}
  before_script: &coverage-template-before |-
    mkdir -p "${COVERAGE_FOLDER}/"
    apt-get update -qq
    apt-get install -qq -y sudo 2>&1 | grep 'Setting up sudo'
    pip3 install -q -r requirements/runtime.txt --upgrade
    pip3 install -q -r requirements/coverage.txt --upgrade
    if [ -z "${SUITE}" ]; then
      coverage erase
    fi
    echo 'coverage run --append --module --source=gitlabci_local gitlabci_local "${@}"' | tee /usr/local/bin/gitlabci-local /usr/local/bin/gcil >/dev/null
    chmod a+x /usr/local/bin/gitlabci-local /usr/local/bin/gcil
  script:
    - |
      if [ ! -z "${SUITE}" ]; then
        (cd "./tests/${SUITE}/" && sh ./test.sh)
      else
        for path in ./tests/*; do (cd "${path}/" && sh ./test.sh); done
      fi
  artifacts:
    paths:
      - coverage-reports/

'Coverage Docker':
  extends:
    - .coverage-template
    - .unit-tests-docker
  image: python:3.9
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-docker
  before_script:
    - *unit-tests-docker-before
    - *coverage-template-before
  after_script:
    - coverage report --show-missing --skip-empty
    - coverage xml -o "${COVERAGE_FOLDER}/coverage-docker.xml"

'Coverage Podman':
  extends:
    - .coverage-template
    - .unit-tests-podman
  image: python:3.9
  variables:
    COVERAGE_FILE: ${CI_PROJECT_DIR}/coverage-reports/.coverage-podman
  before_script:
    - *unit-tests-podman-before
    - *coverage-template-before
  after_script:
    - coverage report --show-missing --skip-empty
    - coverage xml -o "${COVERAGE_FOLDER}/coverage-podman.xml"

'Py3.6 Docker':
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: python:3.6
  before_script:
    - *unit-tests-docker-before
    - *unit-tests-template-before

'Py3.7 Docker':
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: python:3.7
  before_script:
    - *unit-tests-docker-before
    - *unit-tests-template-before

'Py3.8 Docker':
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: python:3.8
  before_script:
    - *unit-tests-docker-before
    - *unit-tests-template-before

'Py3.9 Docker':
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: python:3.9
  before_script:
    - *unit-tests-docker-before
    - *unit-tests-template-before

'Py3.6 Podman':
  extends:
    - .unit-tests-template
    - .unit-tests-podman
    - .unit-tests-rules
  image: python:3.6
  before_script:
    - *unit-tests-podman-before
    - *unit-tests-template-before

'Py3.7 Podman':
  extends:
    - .unit-tests-template
    - .unit-tests-podman
    - .unit-tests-rules
  image: python:3.7
  before_script:
    - *unit-tests-podman-before
    - *unit-tests-template-before

'Py3.8 Podman':
  extends:
    - .unit-tests-template
    - .unit-tests-podman
    - .unit-tests-rules
  image: python:3.8
  before_script:
    - *unit-tests-podman-before
    - *unit-tests-template-before

'Py3.9 Podman':
  extends:
    - .unit-tests-template
    - .unit-tests-podman
    - .unit-tests-rules
  image: python:3.9
  before_script:
    - *unit-tests-podman-before
    - *unit-tests-template-before

'Py3.9 Preview':
  extends:
    - .unit-tests-template
    - .unit-tests-docker
    - .unit-tests-rules
  image: python:3.9
  before_script:
    - *unit-tests-docker-before
    - *unit-tests-template-before
    - pip3 install -q -r requirements/docs.txt --upgrade
  script:
    - python3 ./docs/preview.py

'Python Local':
  extends:
    - .unit-tests-template
  image: local:quiet
  before_script:
    - *unit-tests-template-before
  only:
    - local

'SonarCloud':
  stage: quality
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: ['']
  dependencies:
    - 'Coverage Docker'
    - 'Coverage Podman'
  variables:
    GIT_DEPTH: 0
    SONAR_USER_HOME: ${CI_PROJECT_DIR}/.sonar
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectVersion=$(git describe --always) -Dsonar.branch.name=${CI_COMMIT_REF_NAME}
  rules:
    - if: $CI_COMMIT_REF_NAME == "develop"
      changes:
        - 'gitlabci_local/**/*'
    - if: $CI_COMMIT_REF_NAME == "master"
      when: on_success
    - when: never
  allow_failure: true

'Deploy Release':
  stage: deploy
  dependencies:
    - Build
  variables:
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    TWINE_PASSWORD: ${TWINE_PASSWORD}
  before_script:
    - if [ ! "${CI_COMMIT_REF_PROTECTED}" = 'true' ]; then echo '[ERROR] Please protect this tag...'; exit 1; fi
    - pip3 install -q -r requirements/deploy.txt --upgrade
  script:
    - tag=${CI_COMMIT_REF_NAME:-$(git describe --always --abbrev=0)}
    - description=$(sh ./changelog.sh "${tag}" | sed -z 's/"/\\"/g')
    - description="${description}"$'\n\n''### Download'$'\n'
    - gitlab-release --description "${description}" --link-prefix '* ' ./dist/*
    - twine upload -u '__token__' -p "${TWINE_PASSWORD}" ./dist/*
  rules:
    - if: $CI_COMMIT_TAG

'Deploy Trial':
  stage: deploy
  dependencies:
    - Build
  variables:
    PIP_DISABLE_PIP_VERSION_CHECK: 1
    TWINE_PASSWORD_TEST: ${TWINE_PASSWORD_TEST}
  before_script:
    - pip3 install -q -r requirements/deploy.txt --upgrade
  script:
    - twine upload -u '__token__' -p "${TWINE_PASSWORD_TEST}" --repository testpypi ./dist/*
  only:
    - local
  tags:
    - local
  when: manual
